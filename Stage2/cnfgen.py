# -*- coding: utf-8 -*-
"""CNFGen.ipynb

Automatically generated by Colaboratory.
"""

!pip install cnfgen
!pip install pycosat
!pip install pycryptosat

from cnfformula.families.randomformulas import RandomKCNF as CNF
import re
import pycryptosat
import time
import numpy as np

N = 150

def argument_converter(dimacs):
	cnf = []
	for line in dimacs:
		comment = re.search('^\s*(p|c).*(\n)*$', line)
		header = re.search('^\s*(p)\s+(cnf)\s+(\d+)\s+(\d+)(\n)*$', line)
		clause_input_cnf = re.search('^\s*((-)*\d+\s*)*(0)(\\n)*$', line)  # detect clause

		if header is not None:
			num_variables = int(line.split()[2])

		if comment is None and clause_input_cnf is None:
			print("Invalid input:", line)

		elif clause_input_cnf is not None:
			raw_clause = clause_input_cnf.group(0).split()
			raw_clause.pop()
			clause = [int(numeric_string) for numeric_string in raw_clause]
			cnf.append(clause)
	return cnf

solver = pycryptosat.Solver()

N = 150
R = np.arange(0.2, 10.2, 0.2)
K = [3,4,5]

for k in K:
  for r in R:
    num_total = 0
    num_sat = 0

    # Generate 50 formulas
    for i in range(50):
      K = CNF(k,N,N*r)
      DIMACS_format = K.dimacs(export_header=False)
      lines = DIMACS_format.split("\n")
      cnf = argument_converter(lines)
      print("Start solving")
      start = time.clock()
      for clause in cnf:
        solver.add_clause(clause)
      end = time.clock()
      print(end-start)
      result, solution = solver.solve()
      num_total += 1
      if result != 'False':
        num_sat += 1
    probability = num_sat/num_total
    print("*******************************************************************************************")
    print("K:{0}     R:{1}".format(k, r), "  Stats: {0}".format(probability))

print("Done")

